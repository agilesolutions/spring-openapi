import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.agilesolutions'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

}

ext {
    commit = commit()
    branchName = branchName()
    // see https://spring.io/projects/spring-cloud
    set('springCloudVersion', "2023.0.1")
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-M3")
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    //implementation 'org.springframework.ai:spring-ai-transformers-spring-boot-starter'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'org.projectlombok:lombok:1.18.34'
    implementation 'com.microsoft.azure:applicationinsights-core:3.5.3'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
        mavenBom("com.azure.spring:spring-cloud-azure-dependencies:5.9.0")
    }
}

test {
    useJUnitPlatform()
}

String commit() {
    return 'git rev-parse HEAD'.execute().text.trim()
}

String branchName() {
    return hasProperty('branch.name') ? property('branch.name') : 'git branch --show-current'.execute().text.trim()
}

task copyAppInsightsAgent(type: Copy) {
    from "${rootDir}/libs/applicationinsights-agent.jar"
    into "${buildDir}/libs"
}

task generateHelmChart(type: Copy) {
    inputs.dir('helm/demo')
    inputs.file('build.gradle')
    from('helm') {
        include 'demo/**'
        filter(ReplaceTokens, tokens: [appVersion: version])
    }
    into('build')

}

bootJar {

    archiveFileName = './application.jar'

    manifest{
        attributes(
                'Built-by'          : System.properties['user.name'],
                'Build-Timestamp'   : java.time.Instant.now(),
                'Build-Revision'    : commit,
                'Build-Branch'      : branchName,
                'Created-by'        : "Gradle ${gradle.gradleVersion}",
                'Build-JDK'         : "${System.properties['java.version']} ${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
                'Build-OS'          : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )

    }

    dependsOn copyAppInsightsAgent

}

task dockerBuild(type: Exec) {
    commandLine 'docker', 'build', '-t', "agilesolutions/k8sdemo:${version}", '.'
}

task dockerPush(type: Exec) {
    commandLine 'docker', 'push', "agilesolutions/k8sdemo:${version}"
}


task release(type: GradleBuild) {
    tasks = ['clean', 'build', 'dockerBuild', 'generateHelmChart', 'helmDeploy']
}
test.dependsOn generateHelmChart
compileTestJava.dependsOn generateHelmChart
generateHelmChart.dependsOn bootJar, jar